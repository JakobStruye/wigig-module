/*
 * Copyright (c) 2015-2020 IMDEA Networks Institute
 * Author: Hany Assasa <hany.assasa@gmail.com>
 */
#include "ns3/applications-module.h"
#include "ns3/core-module.h"
#include "ns3/flow-monitor-module.h"
#include "ns3/internet-module.h"
#include "ns3/mobility-module.h"
#include "ns3/network-module.h"
#include "ns3/spectrum-module.h"
#include "ns3/wifi-module.h"
#include "common-functions.h"
#include "ns3/beamforming-trace-helper.h"
#include "ns3/energy-module.h"
#include "ns3/covrage.h"
#include "ns3/system-path.h"

#include <iomanip>
#include <sstream>
/**
 * Simulation Objective:
 * This script is used to evaluate the performance and behaviour of the IEEE 802.11ad standard in
 * an L-Shaped room scenario. In this scenario, the L corner blocks the LOS path and thus the STA
 * has to resort to NLOS (through a first order reflection) to resume communication. Both DMG AP
 * and DMG STA use a parametric codebook generated by our IEEE 802.11ad Codebook Generator in MATLAB.
 * Each device uses an URA antenna array of 2x8 Elements. The channel model is generated by the
 * NIST Q-D Realization software.
 *
 * Network Topology:
 * Network topology is simple and consists of a single DMG PCP/AP and a one DMG STA.
 * The DMG STA moves along the below trajectory and performs beamforming training each 10 BIs i.e 1 s.
 *
 *    ____________________
 *   | DMG AP             |
 *   |                    |
 *   |    |               |
 *   |    |               |
 *   |    |               |
 *   |    |               |
 *   |    |               |
 *   |    |               |
 *   |    |               |
 *   |    |               |_______________________________________________________________
 *   |    |                                                                               |
 *   |    |                                                                               |
 *   |    |                                                                               |
 *   |    |                                                                               |
 *   |    |                                                                               |
 *   |  DMG STA -------------------------------------------------------------------->     |
 *   |                                                                                    |
 *   |____________________________________________________________________________________|
 *
 *
 * Running the Simulation:
 * ./waf --run "evaluate_qd_channel_lroom_scenario"
 *
 * Simulation Output:
 * The simulation generates the following traces:
 * 1. PCAP traces for each station.
 * 2. SNR data for all the packets.
 * 3. SLS Beamforming Traces.
 */

NS_LOG_COMPONENT_DEFINE ("Mobility");

using namespace ns3;
using namespace std;

/**  Application Variables **/
string applicationType = "onoff";          /* Type of the Tx application */
uint64_t totalRx = 0;
double throughput = 0;
Ptr<PacketSink> packetSink;
Ptr<BurstApplication> onoff;
Ptr<BulkSendApplication> bulk;

/* Network Nodes */
Ptr<WifiNetDevice> apWifiNetDevice, staWifiNetDevice;
Ptr<DmgApWifiMac> apWifiMac;
Ptr<DmgStaWifiMac> staWifiMac;
Ptr<DmgWifiPhy> apWifiPhy, staWifiPhy;
Ptr<WifiRemoteStationManager> apRemoteStationManager, staRemoteStationManager;
NetDeviceContainer staDevices;

/*** Beamforming TXSS Schedulling ***/
uint16_t biThreshold = 1;                /* BI Threshold to trigger TXSS TXOP. */
uint16_t biCounter;                       /* Number of beacon intervals that have passed. */

/* Flow monitor */
Ptr<FlowMonitor> monitor;

/* Statistics */
uint64_t macTxDataFailed = 0;
uint64_t macTxOK = 0;
uint64_t macRxOK = 0;
uint64_t transmittedPackets = 0;
uint64_t droppedPackets = 0;
uint64_t receivedPackets = 0;
bool csv = false;                         /* Enable CSV output. */

/* Tracing */
Ptr<QdPropagationEngine> qdPropagationEngine; /* Q-D Propagation Engine. */
CoVRage* covrage;
bool covrageRunning = false;
bool doDelayedCovrage = false;
int covrageInterval = 0;

std::map<Time, uint> pktsPerBurstRcvd;
std::map<Time, Time> latestPerBurstRcvd;

string beamforming = "none";
string prediction = "device";
string directory = "";
string motion = "Mixed";
string bhiConfig = "default";
bool dtibf = true;

std::ofstream tputfile;


void
CalculateThroughput (void)
{
  double thr = CalculateSingleStreamThroughput (packetSink, totalRx, throughput);
//  thr *= 10;
  if (!csv)
    {
      string duration = to_string_with_precision<double> (Simulator::Now ().GetSeconds () - 0.1, 2)
                      + " - " + to_string_with_precision<double> (Simulator::Now ().GetSeconds (), 2);
      std::cout << std::left << std::setw (14) << duration
                << std::left << std::setw (14) << thr
                << std::left << std::setw (14) << qdPropagationEngine->GetCurrentTraceIndex () << std::endl;
      tputfile << duration << " " << thr << std::endl;
    }
  else
    {
      std::cout << to_string_with_precision<double> (Simulator::Now ().GetSeconds (), 1) << "," << thr << std::endl;
    }
  Simulator::Schedule (MilliSeconds (100), &CalculateThroughput);
}

void
SLSCompleted (Ptr<DmgWifiMac> wifiMac, SlsCompletionAttrbitutes attributes)
{
  if (!csv)
    {
      std::cout << "DMG STA " << wifiMac->GetAddress ()
                << " completed SLS phase with DMG STA " << attributes.peerStation << std::endl;
      std::cout << "Best Tx Antenna Configuration: AntennaID=" << uint16_t (attributes.antennaID)
                << ", SectorID=" << uint16_t (attributes.sectorID) << std::endl;
    }
}

void
DoCovrage (void)
{
    if (beamforming == "covrage") {
      WeightsVector wv = covrage->GetWeights();
      staWifiMac->hijackTx(apWifiMac->GetAddress(), wv);
      qdPropagationEngine->ForceRecalc();
    }

//    Simulator::Schedule (MilliSeconds (100), &DoCovrage);
}

void
SLSCompletedSta (Ptr<DmgStaWifiMac> wifiMac, SlsCompletionAttrbitutes attributes)
{
    if (!covrageRunning) {
      covrageRunning = true;
//      DoCovrage();
    }
    if (!dtibf) {
        DoCovrage();
    }
    SLSCompleted(wifiMac, attributes);
}

void
MacRxOk (Ptr<OutputStreamWrapper> stream, WifiMacType, Mac48Address, double snrValue)
{
  *stream->GetStream () << Simulator::Now ().GetNanoSeconds () << "," << snrValue << std::endl;
}

void
StationAssoicated (Ptr<DmgWifiMac> staWifiMac, Mac48Address address, uint16_t aid)
{
  if (!csv)
    {
      std::cout << "DMG STA " << staWifiMac->GetAddress () << " associated with DMG PCP/AP " << address
                << ", Association ID (AID) = " << aid << std::endl;
    }
  if (applicationType == "onoff")
    {
//      onoff->StartApplication ();
    }
  else
    {
//      bulk->StartApplication ();
    }
//    DoCovrage();
}

void
DoDTICoVRage()
{
    if (apWifiMac->GetWifiRemoteStationManager ()->IsAssociated (staWifiMac->GetAddress ()) > 0)
    {
        biCounter++;
        if (biCounter == biThreshold)
        {
            if (beamforming != "sectors") {
                Ptr<Codebook> cb = staWifiMac->GetCodebook();
                cb->DisableTx();
            }
            apWifiMac->Perform_TXSS_TXOP (staWifiMac->GetAddress());
            DoCovrage();
            biCounter = 0;
        }
    }
}
void
ScheduleDTICoVRage()
{
    if (apWifiMac->GetDTIRemainingTime() > MilliSeconds(5)) {
        DoDTICoVRage();
    } else {
        doDelayedCovrage = true;
    }
    Simulator::Schedule (MilliSeconds (covrageInterval), &ScheduleDTICoVRage);
}

void
DataTransmissionIntervalStarted (Ptr<DmgApWifiMac> apWifiMac, Ptr<DmgStaWifiMac> staWifiMac, Mac48Address address, Time)
{
  if (doDelayedCovrage || (covrageInterval == 0)) {
      DoDTICoVRage();
      doDelayedCovrage = false;
  }
}

void
BeaconHeaderIntervalStarted (Ptr<DmgApWifiMac> apWifiMac, Ptr<DmgStaWifiMac> staWifiMac, Mac48Address address, Time)
{
    if (apWifiMac->GetWifiRemoteStationManager ()->IsAssociated (staWifiMac->GetAddress ()) > 0)
    {
        biCounter++;
        if (biCounter == biThreshold)
        {
          if (beamforming != "sectors") {
              Ptr<Codebook> cb = staWifiMac->GetCodebook();
              cb->DisableTx();
          }
          staWifiMac->RequestRetrain();
          apWifiMac->clearSnrMap(staWifiMac->GetAddress ());
          staWifiMac->clearSnrMap(apWifiMac->GetAddress ());
          biCounter = 0;
        }
    }
}

void
MacTxDataFailed (Mac48Address)
{
  macTxDataFailed++;
}

void
MacTxOK (Ptr<const Packet>)
{
  macTxOK++;
}

void
MacRxOK (Ptr<const Packet>)
{
  macRxOK++;
}

void
PhyTxEnd (Ptr<const Packet>)
{
  transmittedPackets++;
}

void
PhyRxDrop (Ptr<const Packet>, WifiPhyRxfailureReason reason)
{
  droppedPackets++;
}

void
PhyRxEnd (Ptr<const Packet>)
{
  receivedPackets++;
}

void
tagMade (const TimestampTag& tag) {
  Time t = tag.GetTimestamp();
  auto it = pktsPerBurstRcvd.find(t);
  if (it == pktsPerBurstRcvd.end()) {
        pktsPerBurstRcvd[t] = 0;
  }
}

void
pktReceived (Ptr<BurstApplication> sender, const Ptr<const Packet> pkt, const Address &)
{
  TimestampTag tag;
  pkt->FindFirstMatchingByteTag(tag);
  Time t = tag.GetTimestamp();
  auto it = pktsPerBurstRcvd.find(t);
  if (it == pktsPerBurstRcvd.end()) {
        pktsPerBurstRcvd[t] = 0;
  }
  pktsPerBurstRcvd[t]++;
  latestPerBurstRcvd[t] = Simulator::Now();

}

int
main (int argc, char *argv[])
{
  bool activateApp = true;                        /* Flag to indicate whether we activate OnOff/Bulk Application. */
  string socketType = "ns3::UdpSocketFactory";    /* Socket type (TCP/UDP). */
  uint32_t packetSize = 1448;                     /* Application payload size in bytes. */
  string dataRate = "7000Mbps";                    /* Application data rate. */
  string tcpVariant = "NewReno";                  /* TCP Variant Type. */
  uint32_t bufferSize = 131072;                   /* TCP Send/Receive Buffer Size. */
  uint32_t maxPackets = 0;                        /* Maximum Number of Packets */
  string msduAggSize = "max";                     /* The maximum aggregation size for A-MSDU in Bytes. */
  string mpduAggSize = "max";                     /* The maximum aggregation size for A-MPDU in Bytes. */
  bool enableRts = false;                         /* Flag to indicate if RTS/CTS handskahre is enabled or disabled. */
  uint32_t rtsThreshold = 0;                      /* RTS/CTS handshare threshold. */
  string queueSize = "10000p";                     /* Wifi MAC Queue Size. */
  string phyMode = "EDMG_SC_MCS21";                   /* Type of the DMG physical layer. */
  uint16_t startDistance = 0;                     /* Starting distance in the Trace-File. */
  bool enableMobility = true;                     /* Enable mobility. */
  bool verbose = false;                           /* Print logging information. */
  double simulationTime = 19;                     /* Simulation time in seconds. */
  bool pcapTracing = false;                       /* Fla to indicate if PCAP tracing is enabled or not. */
  string arrayConfig = "28";                      /* Phased antenna array configuration. */

  string txSize = "Small";
  string rxSize = "Big";
  int fps = 100;


  /* Command line argument parser setup. */
  CommandLine cmd;
  cmd.AddValue ("activateApp", "Whether to activate data transmission or not", activateApp);
  cmd.AddValue ("applicationType", "Type of the Tx Application: onoff or bulk", applicationType);
  cmd.AddValue ("packetSize", "Application packet size in bytes", packetSize);
  cmd.AddValue ("dataRate", "Application data rate", dataRate);
  cmd.AddValue ("maxPackets", "Maximum number of packets to send", maxPackets);
  cmd.AddValue ("tcpVariant", TCP_VARIANTS_NAMES, tcpVariant);
  cmd.AddValue ("socketType", "Type of the Socket (ns3::TcpSocketFactory, ns3::UdpSocketFactory)", socketType);
  cmd.AddValue ("bufferSize", "TCP Buffer Size (Send/Receive) in Bytes", bufferSize);
  cmd.AddValue ("msduAggSize", "The maximum aggregation size for A-MSDU in Bytes", msduAggSize);
  cmd.AddValue ("mpduAggSize", "The maximum aggregation size for A-MPDU in Bytes", mpduAggSize);
  cmd.AddValue ("enableRts", "Enable or disable RTS/CTS handshake", enableRts);
  cmd.AddValue ("rtsThreshold", "The RTS/CTS threshold value", rtsThreshold);
  cmd.AddValue ("queueSize", "The maximum size of the Wifi MAC Queue", queueSize);
  cmd.AddValue ("phyMode", "802.11ad PHY Mode", phyMode);
  cmd.AddValue ("startDistance", "Starting distance in the trace file [0-260]", startDistance);
  cmd.AddValue ("biThreshold", "BI Threshold to trigger beamforming training", biThreshold);
  cmd.AddValue ("enableMobility", "Whether to enable mobility or simulate static scenario", enableMobility);
  cmd.AddValue ("verbose", "Turn on all WifiNetDevice log components", verbose);
  cmd.AddValue ("simulationTime", "Simulation time in seconds", simulationTime);
  cmd.AddValue ("pcap", "Enable PCAP Tracing", pcapTracing);
  cmd.AddValue ("arrayConfig", "Antenna array configuration", arrayConfig);
  cmd.AddValue ("csv", "Enable CSV output instead of plain text. This mode will suppress all the messages related statistics and events.", csv);

  cmd.AddValue ("txSize", "Tx array size (Small/Big)", txSize);
  cmd.AddValue ("rxSize", "Rx array size (Small/Big)", rxSize);
  cmd.AddValue ("beamforming", "Rx beamforming type (covrage/sectors/none)", beamforming);
  cmd.AddValue ("prediction", "Future direction prediction method (device/model/oracle)", prediction);
  cmd.AddValue ("fps", "Frames per second transmitted", fps);
  cmd.AddValue ("motion", "Motion level (low/mixed/high)", motion);
  cmd.AddValue ("bhiConfig", "BHI optimization (default/optimized)", bhiConfig);
  cmd.AddValue ("dtibf", "DTI Beamforming (true/false)", dtibf);
  cmd.AddValue ("covrageInterval", "Time between covrage runs in milliseconds, only with dti bf", covrageInterval);


  cmd.Parse (argc, argv);
  directory = "output/bf_" + beamforming + "_" + prediction + "_tx_" + txSize + "_rx_" + rxSize
              + "_fps_" + to_string(fps) + "_data_" + dataRate + "_motion_" + motion
              + "_bhi_" + bhiConfig + "_dtibf_" + to_string(dtibf)
              + (dtibf ? ("_cvrInterval_" + to_string(covrageInterval)) : "")
              + "/";
  SystemPath::MakeDirectories(directory);
  tputfile = std::ofstream(directory + "throughput");
  auto standard = WIFI_PHY_STANDARD_80211ay;
  /* Validate A-MSDU and A-MPDU values */
  ValidateFrameAggregationAttributes (msduAggSize, mpduAggSize, standard);
  /* Configure RTS/CTS and Fragmentation */
  ConfigureRtsCtsAndFragmenatation (enableRts, rtsThreshold);
  /* Wifi MAC Queue Parameters */
  ChangeQueueSize (queueSize);
  Config::SetDefault ("ns3::WifiMacQueue::MaxDelay", TimeValue(MilliSeconds(20)));

  /*** Configure TCP Options ***/
  ConfigureTcpOptions (tcpVariant, packetSize, bufferSize);

  /**** DmgWifiHelper is a meta-helper ****/
  DmgWifiHelper wifi;

  /* Basic setup */
  wifi.SetStandard (standard);

  /* Turn on logging */
  if (verbose)
    {
      wifi.EnableLogComponents ();
      LogComponentEnable ("Mobility", LOG_LEVEL_ALL);
    }

  /**** Setup mmWave Q-D Channel ****/
  Ptr<MultiModelSpectrumChannel> spectrumChannel = CreateObject<MultiModelSpectrumChannel> ();
  qdPropagationEngine = CreateObject<QdPropagationEngine> ();
//  qdPropagationEngine->SetAttribute ("QDModelFolder", StringValue ("WigigFiles/QdChannel/L-ShapedRoom/"));
  qdPropagationEngine->SetAttribute ("QDModelFolder", StringValue ("../qd-realization/src/examples/BoxLectureRoom" + motion + "/Output/Ns3/"));
  //  qdPropagationEngine->SetAttribute ("QDModelFolder", StringValue ("/mnt/windows/Users/user/"));


  Ptr<QdPropagationLossModel> lossModelRaytracing = CreateObject<QdPropagationLossModel> (qdPropagationEngine);
  Ptr<QdPropagationDelayModel> propagationDelayRayTracing = CreateObject<QdPropagationDelayModel> (qdPropagationEngine);
  spectrumChannel->AddSpectrumPropagationLossModel (lossModelRaytracing);
  spectrumChannel->SetPropagationDelayModel (propagationDelayRayTracing);

  Time interval = MilliSeconds(1);
  if (enableMobility)
    {
      qdPropagationEngine->SetAttribute ("Interval", TimeValue (interval));
    }
   PredictionType predType = prediction == "device" ? PredictionType::DEVICE : prediction == "model" ? PredictionType::MODEL : prediction == "oracle" ? PredictionType::ORACLE : PredictionType::UNDEFINED;
   covrage = new CoVRage("../qd-realization/src/examples/BoxLectureRoom" + motion + "/Input/", interval, predType);

   std::ofstream outfile(directory + "CoVRage.txt");
   covrage->SetOutfile(&outfile);
   qdPropagationEngine->SetOutfile(&outfile);

  /**** Setup physical layer ****/
  SpectrumDmgWifiPhyHelper spectrumWifiPhy = SpectrumDmgWifiPhyHelper::Default ();
  spectrumWifiPhy.SetChannel (spectrumChannel);
  /* All nodes transmit at 10 dBm == 10 mW, no adaptation */
  spectrumWifiPhy.Set ("TxPowerStart", DoubleValue (10.0));
  spectrumWifiPhy.Set ("TxPowerEnd", DoubleValue (10.0));
  spectrumWifiPhy.Set ("TxPowerLevels", UintegerValue (1));
  if (true)
  {
      spectrumWifiPhy.Set ("PreambleDetectionModel", StringValue ("ns3::ThresholdPreambleDetectionModel"));
      Config::SetDefault ("ns3::ThresholdPreambleDetectionModel::MinimumRssi", DoubleValue (-78));
      Config::SetDefault ("ns3::ThresholdPreambleDetectionModel::Threshold", DoubleValue (-10));
  }
  /* Set the operational channel */
  spectrumWifiPhy.Set ("ChannelNumber", UintegerValue (2));
  spectrumWifiPhy.SetErrorRateModel ("ns3::DmgErrorModel",
                                    "FileName", StringValue ("WigigFiles/ErrorModel/LookupTable_1458_ay.txt"));
  /* Set default algorithm for all nodes to be constant rate */
//  wifi.SetRemoteStationManager ("ns3::CbtraaDmgWifiManager");//, "DataMode", StringValue (phyMode));
  wifi.SetRemoteStationManager ("ns3::ConstantRateWifiManager", "DataMode", StringValue (phyMode));
  /* Make four nodes and set them up with the phy and the mac */
  NodeContainer wifiNodes;
  wifiNodes.Create (2);
  Ptr<Node> apWifiNode = wifiNodes.Get (0);
  Ptr<Node> staWifiNode = wifiNodes.Get (1);

  /* Add a DMG upper mac */
  DmgWifiMacHelper wifiMac = DmgWifiMacHelper::Default ();

  /* Install DMG PCP/AP Node */
  Ssid ssid = Ssid ("Mobility");
  wifiMac.SetType ("ns3::DmgApWifiMac",
                   "Ssid", SsidValue (ssid),
                   "BE_MaxAmpduSize", StringValue (mpduAggSize),
                   "BE_MaxAmsduSize", StringValue (msduAggSize),
                   "SSSlotsPerABFT", UintegerValue (bhiConfig == "optimized" ? 8 : 8),
                  "SSFramesPerSlot", UintegerValue (16),
                   "BeaconInterval", TimeValue (MicroSeconds (bhiConfig == "optimized" ? 1024000 : 102400)),
                  "EDMGSupported", BooleanValue (true)
                   //"IsResponderTXSS", BooleanValue(false)
                  );

  /* Set Parametric Codebook for the DMG AP */
//  wifi.SetCodebook ("ns3::CodebookParametric",
//                    "FileName", StringValue ("WigigFiles/Codebook/CODEBOOK_URA_AP_" + arrayConfig + "x.txt"));
    wifi.SetCodebook ("ns3::CodebookParametric","FileName", StringValue ("../802.11ad-codebook-generator-ns3/codebookParam" + txSize));


  /* Create Wifi Network Devices (WifiNetDevice) */
  NetDeviceContainer apDevice;
  apDevice = wifi.Install (spectrumWifiPhy, wifiMac, apWifiNode);

  wifiMac.SetType ("ns3::DmgStaWifiMac",
                   "Ssid", SsidValue (ssid), "ActiveProbing", BooleanValue (false),
                   "BE_MaxAmpduSize", StringValue (mpduAggSize),
                   "BE_MaxAmsduSize", StringValue (msduAggSize),
                  "EDMGSupported", BooleanValue (true));

  /* Set Parametric Codebook for the DMG STA */
//  wifi.SetCodebook ("ns3::CodebookParametric",
//                    "FileName", StringValue ("WigigFiles/Codebook/CODEBOOK_URA_STA_" + arrayConfig + "x.txt"));
  wifi.SetCodebook ("ns3::CodebookParametric","FileName", StringValue ("../802.11ad-codebook-generator-ns3/codebookParam" + rxSize));


  staDevices = wifi.Install (spectrumWifiPhy, wifiMac, staWifiNode);

  /* Setting mobility model */
  MobilityHelper mobility;
  mobility.SetMobilityModel ("ns3::ConstantPositionMobilityModel");
  mobility.Install (wifiNodes);

  /* energy source */
  BasicEnergySourceHelper basicSourceHelper;
  // configure energy source
  basicSourceHelper.Set ("BasicEnergySourceInitialEnergyJ", DoubleValue (999999999));
  basicSourceHelper.Set ("BasicEnergySupplyVoltageV", DoubleValue(1));
  // install source
  EnergySourceContainer sources = basicSourceHelper.Install (staWifiNode);
  /* device energy model */
  WifiRadioEnergyModelHelper radioEnergyHelper;
  // configure radio energy model
  radioEnergyHelper.Set ("TxCurrentA", DoubleValue (3.9));
  radioEnergyHelper.Set ("RxCurrentA", DoubleValue (4.0));
  radioEnergyHelper.Set ("CcaBusyCurrentA", DoubleValue (2.6));
  radioEnergyHelper.Set ("SwitchingCurrentA", DoubleValue (2.6));
  radioEnergyHelper.Set ("IdleCurrentA", DoubleValue (2.6));
  //  radioEnergyHelper.Set ("SleepCurrentA", DoubleValue (2.0));

  // install device model
  DeviceEnergyModelContainer deviceModels = radioEnergyHelper.Install (staDevices, sources);

  /* Internet stack*/
  InternetStackHelper stack;
  stack.Install (wifiNodes);

  Ipv4AddressHelper address;
  address.SetBase ("10.0.0.0", "255.255.255.0");
  Ipv4InterfaceContainer apInterface;
  apInterface = address.Assign (apDevice);
  Ipv4InterfaceContainer staInterfaces;
  staInterfaces = address.Assign (staDevices);

  /* We do not want any ARP packets */
  PopulateArpCache ();

  if (activateApp)
    {
      /* Install Simple UDP Server on the DMG AP */
      PacketSinkHelper sinkHelper (socketType, InetSocketAddress (Ipv4Address::GetAny (), 9999));
      ApplicationContainer sinkApp = sinkHelper.Install (staWifiNode);
      packetSink = StaticCast<PacketSink> (sinkApp.Get (0));
      sinkApp.Start (Seconds (0.0));

      /* Install TCP/UDP Transmitter on the DMG STA */
      Address dest (InetSocketAddress (staInterfaces.GetAddress (0), 9999));
      ApplicationContainer srcApp;
      if (applicationType == "onoff")
        {
          BurstHelper src (socketType, dest);
          src.SetAttribute ("MaxPackets", UintegerValue (maxPackets));
          src.SetAttribute ("PacketSize", UintegerValue (packetSize));
          src.SetAttribute ("BurstsPerSecond", StringValue ("ns3::ConstantRandomVariable[Constant=" + std::to_string(fps) + "]"));
//          src.SetAttribute ("OffTime", StringValue ("ns3::ConstantRandomVariable[Constant=0]"));
          src.SetAttribute ("DataRate", DataRateValue (DataRate (dataRate)));
          src.SetAttribute("EnableTimestamp", BooleanValue(true));
          srcApp = src.Install (apWifiNode);
          onoff = StaticCast<BurstApplication> (srcApp.Get (0));
          onoff->TraceConnectWithoutContext("TagCreated", MakeCallback(&tagMade));
          packetSink->TraceConnectWithoutContext ("Rx", MakeBoundCallback(&pktReceived, onoff));

        }
      else if (applicationType == "bulk")
        {
          BulkSendHelper src (socketType, dest);
          srcApp= src.Install (apWifiNode);
          bulk = StaticCast<BulkSendApplication> (srcApp.Get (0));
        }
      srcApp.Start (Seconds (0.1));
      srcApp.Stop (Seconds (simulationTime+0.1));
    }

  /* Enable Traces */
  if (pcapTracing)
    {
      spectrumWifiPhy.SetPcapDataLinkType (YansWifiPhyHelper::DLT_IEEE802_11_RADIO);
//      spectrumWifiPhy.SetSnapshotLength (120);
      spectrumWifiPhy.EnablePcap ("Traces/AccessPoint", apDevice, false);
      spectrumWifiPhy.EnablePcap ("Traces/StaNode", staDevices.Get (0), false);
    }

  /* Stations */
  apWifiNetDevice = StaticCast<WifiNetDevice> (apDevice.Get (0));
  staWifiNetDevice = StaticCast<WifiNetDevice> (staDevices.Get (0));
  apRemoteStationManager = StaticCast<WifiRemoteStationManager> (apWifiNetDevice->GetRemoteStationManager ());
  apWifiMac = StaticCast<DmgApWifiMac> (apWifiNetDevice->GetMac ());
  staWifiMac = StaticCast<DmgStaWifiMac> (staWifiNetDevice->GetMac ());
  apWifiPhy = StaticCast<DmgWifiPhy> (apWifiNetDevice->GetPhy ());
  staWifiPhy = StaticCast<DmgWifiPhy> (staWifiNetDevice->GetPhy ());
  staRemoteStationManager = StaticCast<WifiRemoteStationManager> (staWifiNetDevice->GetRemoteStationManager ());

  /** Connect Traces **/
  Ptr<SlsBeamformingTraceHelper> slsTracerHelper
      = Create<SlsBeamformingTraceHelper> (qdPropagationEngine, directory, std::to_string (RngSeedManager::GetRun ()));

  /* DMG AP Straces */
  slsTracerHelper->ConnectTrace (apWifiMac);
  if (dtibf) {
      apWifiMac->TraceConnectWithoutContext("DTIStarted", MakeBoundCallback(&DataTransmissionIntervalStarted,
                                                                            apWifiMac, staWifiMac));
      if (covrageInterval > 0) {
          Simulator::Schedule(MilliSeconds(100), &ScheduleDTICoVRage);
      }
  } else {
      apWifiMac->TraceConnectWithoutContext("BTIStarted", MakeBoundCallback(&BeaconHeaderIntervalStarted,
                                                                            apWifiMac, staWifiMac));
  }
  apWifiMac->TraceConnectWithoutContext ("SLSCompleted", MakeBoundCallback (&SLSCompleted, apWifiMac));
  apWifiPhy->TraceConnectWithoutContext ("PhyTxEnd", MakeCallback (&PhyTxEnd));
  apRemoteStationManager->TraceConnectWithoutContext ("MacTxDataFailed", MakeCallback (&MacTxDataFailed));
  apWifiMac->TraceConnectWithoutContext ("MacTx", MakeCallback (&MacTxOK));

  /* DMG STA Straces */
  slsTracerHelper->ConnectTrace (staWifiMac);
  staWifiMac->TraceConnectWithoutContext ("Assoc", MakeBoundCallback (&StationAssoicated, staWifiMac));
  staWifiMac->TraceConnectWithoutContext ("SLSCompleted", MakeBoundCallback (&SLSCompletedSta, staWifiMac));
  staWifiPhy->TraceConnectWithoutContext ("PhyRxEnd", MakeCallback (&PhyRxEnd));
  staWifiPhy->TraceConnectWithoutContext ("PhyRxDrop", MakeCallback (&PhyRxDrop));
  staWifiMac->TraceConnectWithoutContext ("MacRx", MakeCallback (&MacRxOK));


  /* Get SNR Traces */
  AsciiTraceHelper ascii;
  Ptr<OutputStreamWrapper> snrStream = ascii.CreateFileStream (directory + "snrValues.csv");
  apRemoteStationManager->TraceConnectWithoutContext ("MacRxOK", MakeBoundCallback (&MacRxOk, snrStream));

  FlowMonitorHelper flowmon;
  if (activateApp)
    {
      /* Install FlowMonitor on all nodes */
      monitor = flowmon.InstallAll ();

      /* Print Output */
      if (!csv)
        {
          std::cout << std::left << std::setw (12) << "Time [s]"
                    << std::left << std::setw (12) << "Throughput [Mbps]" << std::endl;
        }

      /* Schedule Throughput Calulcations */
      Simulator::Schedule (MilliSeconds (100), &CalculateThroughput);
    }

  Simulator::Stop (Seconds (simulationTime + 0.201));
  Simulator::Run ();
  std::ofstream summaryfile(directory+"summary");
  std::streambuf* orig_cout = std::cout.rdbuf();
  std::cout.rdbuf(summaryfile.rdbuf());
  for (DeviceEnergyModelContainer::Iterator iter = deviceModels.Begin (); iter != deviceModels.End (); iter ++)
  {
      double energyConsumed = (*iter)->GetTotalEnergyConsumption ();
      std::cout << "End of simulation (" << Simulator::Now ().GetSeconds ()
                << "s) Total energy consumed by radio = " << energyConsumed << "J" << std::endl;
      //        NS_ASSERT (energyConsumed <= 0.1);
  }

  if (!csv)
    {
      if (activateApp)
        {
          /* Print Flow-Monitor Statistics */
          PrintFlowMonitorStatistics (flowmon, monitor, simulationTime);

          /* Print Application Layer Results Summary */
          std::cout << "\nApplication Layer Statistics:" << std::endl;;
          if (applicationType == "onoff")
            {
              std::cout << "  Tx Packets: " << onoff->GetTotalTxPackets () << std::endl;
              std::cout << "  Tx Bytes:   " << onoff->GetTotalTxBytes () << std::endl;
            }
          else
            {
              std::cout << "  Tx Packets: " << bulk->GetTotalTxPackets () << std::endl;
              std::cout << "  Tx Bytes:   " << bulk->GetTotalTxBytes () << std::endl;
            }
            std::ofstream myFile;
            myFile.open (directory + "delays.out");
            uint64_t good = 0;
            uint64_t bad = 0;
            std::vector<std::pair<int64_t,double>> usDelays;
            for (auto it = pktsPerBurstRcvd.begin(); it != pktsPerBurstRcvd.end(); it++) {
              if (Seconds(simulationTime) - it->first < Seconds(0.1)) {
                  //ignore
                  continue;
              } else if (it->second < onoff->GetPktsPerBurst()) {
                  bad += 1;
              } else {
                  good += 1;
              }
              usDelays.push_back({(latestPerBurstRcvd[it->first] - it->first).GetMicroSeconds(), it->second / (double)onoff->GetPktsPerBurst()});

            }
            std::sort(usDelays.begin(), usDelays.end());
            for (auto v: usDelays) {
              myFile << v.first << " " << v.second << std::endl;
            }
            myFile << good << " " << bad << std::endl;
            myFile.close();
        }


      std::cout << "  Rx Packets: " << packetSink->GetTotalReceivedPackets () << std::endl;
      std::cout << "  Rx Bytes:   " << packetSink->GetTotalRx () << std::endl;
      std::cout << "  Throughput: " << packetSink->GetTotalRx () * 8.0 / (simulationTime * 1e6) << " Mbps" << std::endl;

      /* Print MAC Layer Statistics */
      std::cout << "\nMAC Layer Statistics:" << std::endl;;
      std::cout << "  Number of MAC packets offered:  " << macTxOK << std::endl;
      std::cout << "  Number of MAC packets arrived:  " << macRxOK << std::endl;
      std::cout << "  Number of Failed Tx Data Packets:  " << macTxDataFailed << std::endl;

      /* Print PHY Layer Statistics */
      std::cout << "\nPHY Layer Statistics:" << std::endl;;
      std::cout << "  Number of Tx Packets:         " << transmittedPackets << std::endl;
      std::cout << "  Number of Rx Packets:         " << receivedPackets << std::endl;
      std::cout << "  Number of Rx Dropped Packets: " << droppedPackets << std::endl;

      std::cout.rdbuf(orig_cout);
      summaryfile.close();

  }
  Simulator::Destroy ();
  tputfile.close();
  outfile.close();

  return 0;
}
